{"ast":null,"code":"var _jsxFileName = \"/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(100vh - 100px);\n  background: white;\n  overflow: hidden;\n  cursor: default;\n  \n  &.dragging {\n    cursor: grabbing;\n  }\n`;\n_c = WhiteboardContainer;\nconst Canvas = styled.canvas`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n`;\n_c2 = Canvas;\nconst Whiteboard = ({\n  thoughts\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const engineRef = useRef(null);\n  const renderRef = useRef(null);\n  const bodiesRef = useRef({});\n  const mouseConstraintRef = useRef(null);\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    console.log('Initializing Matter.js engine');\n\n    // Get container dimensions\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: {\n        x: 0,\n        y: 0\n      }\n    });\n    engineRef.current = engine;\n\n    // Create renderer\n    const render = Matter.Render.create({\n      element: container,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: false,\n        showVelocity: false,\n        showCollisions: false,\n        background: 'white',\n        pixelRatio: window.devicePixelRatio\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls\n    const wallOptions = {\n      isStatic: true,\n      render: {\n        visible: false\n      }\n    };\n    const wallThickness = 60;\n    const walls = [Matter.Bodies.rectangle(0, height / 2, wallThickness, height, wallOptions), Matter.Bodies.rectangle(width, height / 2, wallThickness, height, wallOptions), Matter.Bodies.rectangle(width / 2, 0, width, wallThickness, wallOptions), Matter.Bodies.rectangle(width / 2, height, width, wallThickness, wallOptions)];\n    Matter.World.add(engine.world, walls);\n\n    // Create mouse constraint\n    const mouse = Matter.Mouse.create(render.canvas);\n    mouse.pixelRatio = window.devicePixelRatio;\n    const mouseConstraint = Matter.MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        damping: 0.1,\n        render: {\n          visible: false\n        }\n      }\n    });\n    mouseConstraintRef.current = mouseConstraint;\n    Matter.World.add(engine.world, mouseConstraint);\n\n    // Create or update bodies for all thoughts\n    thoughts.forEach(thought => {\n      if (!bodiesRef.current[thought.id]) {\n        const margin = 100;\n        const x = margin + Math.random() * (width - 2 * margin);\n        const y = margin + Math.random() * (height - 2 * margin);\n        const body = Matter.Bodies.circle(x, y, 40, {\n          id: thought.id,\n          render: {\n            visible: false\n          },\n          isStatic: false,\n          isSleeping: false,\n          friction: 0.05,\n          frictionAir: 0.02,\n          restitution: 0.3,\n          mass: 1,\n          inertia: Infinity\n        });\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n      }\n    });\n\n    // Start the engine and renderer\n    Matter.Runner.run(Matter.Runner.create(), engine);\n    Matter.Render.run(render);\n\n    // Set up text rendering\n    let animationFrameId;\n    const renderText = () => {\n      const ctx = render.canvas.getContext('2d');\n      if (!ctx) return;\n\n      // Clear the canvas\n      ctx.clearRect(0, 0, width, height);\n      ctx.fillStyle = 'white';\n      ctx.fillRect(0, 0, width, height);\n\n      // Draw all thoughts\n      thoughts.forEach(thought => {\n        const body = bodiesRef.current[thought.id];\n        if (!body) return;\n        const pos = body.position;\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';\n        ctx.shadowBlur = 4;\n        ctx.shadowOffsetX = 1;\n        ctx.shadowOffsetY = 1;\n        ctx.font = '18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif';\n        ctx.fillStyle = '#333';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n        ctx.restore();\n      });\n      animationFrameId = requestAnimationFrame(renderText);\n    };\n    renderText();\n\n    // Handle mouse events\n    Matter.Events.on(mouseConstraint, 'mousemove', event => {\n      const mousePosition = event.mouse.position;\n      const bodiesAtPoint = Matter.Query.point(Object.values(bodiesRef.current), mousePosition);\n      render.canvas.style.cursor = bodiesAtPoint.length > 0 ? 'grab' : 'default';\n    });\n    Matter.Events.on(mouseConstraint, 'startdrag', () => {\n      render.canvas.style.cursor = 'grabbing';\n    });\n    Matter.Events.on(mouseConstraint, 'enddrag', () => {\n      render.canvas.style.cursor = 'grab';\n    });\n\n    // Handle resize\n    const handleResize = () => {\n      const newWidth = container.clientWidth;\n      const newHeight = container.clientHeight;\n      render.canvas.width = newWidth;\n      render.canvas.height = newHeight;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n      Matter.Events.off(mouseConstraint, 'mousemove');\n      Matter.Events.off(mouseConstraint, 'startdrag');\n      Matter.Events.off(mouseConstraint, 'enddrag');\n      Matter.World.remove(engine.world, mouseConstraint);\n      Matter.Render.stop(render);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n      bodiesRef.current = {};\n    };\n  }, [thoughts]);\n  return /*#__PURE__*/_jsxDEV(WhiteboardContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"XLsA4mZrZSCNd9Kpt1sOMgcK9hE=\");\n_c3 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"WhiteboardContainer\");\n$RefreshReg$(_c2, \"Canvas\");\n$RefreshReg$(_c3, \"Whiteboard\");","map":{"version":3,"names":["React","useEffect","useRef","styled","Matter","jsxDEV","_jsxDEV","WhiteboardContainer","div","_c","Canvas","canvas","_c2","Whiteboard","thoughts","_s","containerRef","canvasRef","engineRef","renderRef","bodiesRef","mouseConstraintRef","current","console","log","container","width","clientWidth","height","clientHeight","engine","Engine","create","gravity","x","y","render","Render","element","options","wireframes","showVelocity","showCollisions","background","pixelRatio","window","devicePixelRatio","wallOptions","isStatic","visible","wallThickness","walls","Bodies","rectangle","World","add","world","mouse","Mouse","mouseConstraint","MouseConstraint","constraint","stiffness","damping","forEach","thought","id","margin","Math","random","body","circle","isSleeping","friction","frictionAir","restitution","mass","inertia","Infinity","Runner","run","animationFrameId","renderText","ctx","getContext","clearRect","fillStyle","fillRect","pos","position","save","translate","rotate","angle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","font","textAlign","textBaseline","fillText","text","restore","requestAnimationFrame","Events","on","event","mousePosition","bodiesAtPoint","Query","point","Object","values","style","cursor","length","handleResize","newWidth","newHeight","setPixelRatio","addEventListener","removeEventListener","cancelAnimationFrame","off","remove","stop","clear","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\n\nconst WhiteboardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(100vh - 100px);\n  background: white;\n  overflow: hidden;\n  cursor: default;\n  \n  &.dragging {\n    cursor: grabbing;\n  }\n`;\n\nconst Canvas = styled.canvas`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n`;\n\ninterface Thought {\n  id: number;\n  text: string;\n  color: string;\n  size: 'small' | 'medium' | 'large';\n  isPinned: boolean;\n}\n\ninterface WhiteboardProps {\n  thoughts: Thought[];\n}\n\nconst Whiteboard: React.FC<WhiteboardProps> = ({ thoughts }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const engineRef = useRef<Matter.Engine | null>(null);\n  const renderRef = useRef<Matter.Render | null>(null);\n  const bodiesRef = useRef<{ [key: number]: Matter.Body }>({});\n  const mouseConstraintRef = useRef<Matter.MouseConstraint | null>(null);\n\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n\n    console.log('Initializing Matter.js engine');\n\n    // Get container dimensions\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: { x: 0, y: 0 }\n    });\n    engineRef.current = engine;\n\n    // Create renderer\n    const render = Matter.Render.create({\n      element: container,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: false,\n        showVelocity: false,\n        showCollisions: false,\n        background: 'white',\n        pixelRatio: window.devicePixelRatio\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls\n    const wallOptions = { \n      isStatic: true,\n      render: { visible: false }\n    };\n\n    const wallThickness = 60;\n    const walls = [\n      Matter.Bodies.rectangle(0, height/2, wallThickness, height, wallOptions),\n      Matter.Bodies.rectangle(width, height/2, wallThickness, height, wallOptions),\n      Matter.Bodies.rectangle(width/2, 0, width, wallThickness, wallOptions),\n      Matter.Bodies.rectangle(width/2, height, width, wallThickness, wallOptions)\n    ];\n    Matter.World.add(engine.world, walls);\n\n    // Create mouse constraint\n    const mouse = Matter.Mouse.create(render.canvas);\n    mouse.pixelRatio = window.devicePixelRatio;\n    \n    const mouseConstraint = Matter.MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        damping: 0.1,\n        render: { visible: false }\n      }\n    });\n\n    mouseConstraintRef.current = mouseConstraint;\n    Matter.World.add(engine.world, mouseConstraint);\n\n    // Create or update bodies for all thoughts\n    thoughts.forEach((thought) => {\n      if (!bodiesRef.current[thought.id]) {\n        const margin = 100;\n        const x = margin + Math.random() * (width - 2 * margin);\n        const y = margin + Math.random() * (height - 2 * margin);\n\n        const body = Matter.Bodies.circle(x, y, 40, {\n          id: thought.id,\n          render: { visible: false },\n          isStatic: false,\n          isSleeping: false,\n          friction: 0.05,\n          frictionAir: 0.02,\n          restitution: 0.3,\n          mass: 1,\n          inertia: Infinity\n        });\n\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n      }\n    });\n\n    // Start the engine and renderer\n    Matter.Runner.run(Matter.Runner.create(), engine);\n    Matter.Render.run(render);\n\n    // Set up text rendering\n    let animationFrameId: number;\n    const renderText = () => {\n      const ctx = render.canvas.getContext('2d');\n      if (!ctx) return;\n\n      // Clear the canvas\n      ctx.clearRect(0, 0, width, height);\n      ctx.fillStyle = 'white';\n      ctx.fillRect(0, 0, width, height);\n\n      // Draw all thoughts\n      thoughts.forEach((thought) => {\n        const body = bodiesRef.current[thought.id];\n        if (!body) return;\n\n        const pos = body.position;\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';\n        ctx.shadowBlur = 4;\n        ctx.shadowOffsetX = 1;\n        ctx.shadowOffsetY = 1;\n\n        ctx.font = '18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif';\n        ctx.fillStyle = '#333';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n\n        ctx.restore();\n      });\n\n      animationFrameId = requestAnimationFrame(renderText);\n    };\n\n    renderText();\n\n    // Handle mouse events\n    Matter.Events.on(mouseConstraint, 'mousemove', (event) => {\n      const mousePosition = event.mouse.position;\n      const bodiesAtPoint = Matter.Query.point(Object.values(bodiesRef.current), mousePosition);\n      render.canvas.style.cursor = bodiesAtPoint.length > 0 ? 'grab' : 'default';\n    });\n\n    Matter.Events.on(mouseConstraint, 'startdrag', () => {\n      render.canvas.style.cursor = 'grabbing';\n    });\n\n    Matter.Events.on(mouseConstraint, 'enddrag', () => {\n      render.canvas.style.cursor = 'grab';\n    });\n\n    // Handle resize\n    const handleResize = () => {\n      const newWidth = container.clientWidth;\n      const newHeight = container.clientHeight;\n      render.canvas.width = newWidth;\n      render.canvas.height = newHeight;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n      Matter.Events.off(mouseConstraint, 'mousemove');\n      Matter.Events.off(mouseConstraint, 'startdrag');\n      Matter.Events.off(mouseConstraint, 'enddrag');\n      Matter.World.remove(engine.world, mouseConstraint);\n      Matter.Render.stop(render);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n      bodiesRef.current = {};\n    };\n  }, [thoughts]);\n\n  return (\n    <WhiteboardContainer ref={containerRef}>\n      <Canvas ref={canvasRef} />\n    </WhiteboardContainer>\n  );\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}