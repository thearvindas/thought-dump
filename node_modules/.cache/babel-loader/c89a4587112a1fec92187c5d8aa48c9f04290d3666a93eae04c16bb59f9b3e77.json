{"ast":null,"code":"var _jsxFileName = \"/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(100vh - 100px);\n  background: white;\n  overflow: hidden;\n`;\n_c = WhiteboardContainer;\nconst Canvas = styled.canvas`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n`;\n_c2 = Canvas;\nconst Whiteboard = ({\n  thoughts\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const engineRef = useRef(null);\n  const renderRef = useRef(null);\n  const bodiesRef = useRef({});\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    console.log('Initializing Matter.js engine');\n\n    // Get container dimensions\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n    console.log('Container dimensions:', {\n      width,\n      height\n    });\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: {\n        x: 0,\n        y: 0\n      }\n    });\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      element: container,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: false,\n        showVelocity: false,\n        showCollisions: false,\n        background: 'white'\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = {\n      isStatic: true,\n      render: {\n        visible: false\n      }\n    };\n    const wallThickness = 60;\n    const walls = [\n    // Left wall\n    Matter.Bodies.rectangle(0, height / 2, wallThickness, height, wallOptions),\n    // Right wall\n    Matter.Bodies.rectangle(width, height / 2, wallThickness, height, wallOptions),\n    // Top wall\n    Matter.Bodies.rectangle(width / 2, 0, width, wallThickness, wallOptions),\n    // Bottom wall\n    Matter.Bodies.rectangle(width / 2, height, width, wallThickness, wallOptions)];\n    Matter.World.add(engine.world, walls);\n\n    // Custom render function for text\n    Matter.Events.on(render, 'afterRender', () => {\n      const ctx = render.context;\n      Object.values(bodiesRef.current).forEach(body => {\n        const thought = thoughts.find(t => t.id === body.id);\n        if (!thought) return;\n\n        // Draw the rectangle with a subtle shadow\n        const width = 200;\n        const height = 60;\n        const pos = body.position;\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n\n        // Add shadow\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';\n        ctx.shadowBlur = 10;\n        ctx.shadowOffsetX = 2;\n        ctx.shadowOffsetY = 2;\n\n        // Draw rectangle background\n        ctx.fillStyle = '#ffffff';\n        ctx.strokeStyle = '#e0e0e0';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.rect(-width / 2, -height / 2, width, height);\n        ctx.fill();\n        ctx.stroke();\n\n        // Reset shadow for text\n        ctx.shadowColor = 'transparent';\n\n        // Draw text\n        ctx.font = '16px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif';\n        ctx.fillStyle = '#333';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n        ctx.restore();\n      });\n    });\n    Matter.Runner.run(Matter.Runner.create(), engine);\n    Matter.Render.run(render);\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = container.clientWidth;\n      const newHeight = container.clientHeight;\n      render.canvas.width = newWidth;\n      render.canvas.height = newHeight;\n      render.options.width = newWidth;\n      render.options.height = newHeight;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      Matter.Events.off(render, 'afterRender');\n      Matter.Render.stop(render);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, []);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach(thought => {\n      if (!bodiesRef.current[thought.id]) {\n        console.log('Creating new body for thought:', thought);\n        const container = containerRef.current;\n        if (!container) return;\n\n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (container.clientWidth - 2 * margin);\n        const y = margin + Math.random() * (container.clientHeight - 2 * margin);\n        const body = Matter.Bodies.rectangle(x, y, 200, 60, {\n          id: thought.id,\n          render: {\n            fillStyle: '#ffffff',\n            strokeStyle: '#e0e0e0',\n            lineWidth: 1\n          },\n          isStatic: thought.isPinned,\n          friction: 0.05,\n          frictionAir: 0.01,\n          restitution: 0.3,\n          chamfer: {\n            radius: 5\n          }\n        });\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n  return /*#__PURE__*/_jsxDEV(WhiteboardContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"0f/TGSg2/xmQP2XYh9CgsLXCJUU=\");\n_c3 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"WhiteboardContainer\");\n$RefreshReg$(_c2, \"Canvas\");\n$RefreshReg$(_c3, \"Whiteboard\");","map":{"version":3,"names":["React","useEffect","useRef","styled","Matter","jsxDEV","_jsxDEV","WhiteboardContainer","div","_c","Canvas","canvas","_c2","Whiteboard","thoughts","_s","containerRef","canvasRef","engineRef","renderRef","bodiesRef","current","console","log","container","width","clientWidth","height","clientHeight","engine","Engine","create","gravity","x","y","render","Render","element","options","wireframes","showVelocity","showCollisions","background","wallOptions","isStatic","visible","wallThickness","walls","Bodies","rectangle","World","add","world","Events","on","ctx","context","Object","values","forEach","body","thought","find","t","id","pos","position","save","translate","rotate","angle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","fillStyle","strokeStyle","lineWidth","beginPath","rect","fill","stroke","font","textAlign","textBaseline","fillText","text","restore","Runner","run","handleResize","newWidth","newHeight","setPixelRatio","window","devicePixelRatio","addEventListener","removeEventListener","off","stop","clear","remove","entries","Number","margin","Math","random","isPinned","friction","frictionAir","restitution","chamfer","radius","Body","setVelocity","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\n\nconst WhiteboardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(100vh - 100px);\n  background: white;\n  overflow: hidden;\n`;\n\nconst Canvas = styled.canvas`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n`;\n\ninterface Thought {\n  id: number;\n  text: string;\n  color: string;\n  size: 'small' | 'medium' | 'large';\n  isPinned: boolean;\n}\n\ninterface WhiteboardProps {\n  thoughts: Thought[];\n}\n\nconst Whiteboard: React.FC<WhiteboardProps> = ({ thoughts }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const engineRef = useRef<Matter.Engine | null>(null);\n  const renderRef = useRef<Matter.Render | null>(null);\n  const bodiesRef = useRef<{ [key: number]: Matter.Body }>({});\n\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n\n    console.log('Initializing Matter.js engine');\n\n    // Get container dimensions\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n\n    console.log('Container dimensions:', { width, height });\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: { x: 0, y: 0 }\n    });\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      element: container,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: false,\n        showVelocity: false,\n        showCollisions: false,\n        background: 'white',\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = { \n      isStatic: true,\n      render: { \n        visible: false\n      }\n    };\n\n    const wallThickness = 60;\n    const walls = [\n      // Left wall\n      Matter.Bodies.rectangle(0, height/2, wallThickness, height, wallOptions),\n      // Right wall\n      Matter.Bodies.rectangle(width, height/2, wallThickness, height, wallOptions),\n      // Top wall\n      Matter.Bodies.rectangle(width/2, 0, width, wallThickness, wallOptions),\n      // Bottom wall\n      Matter.Bodies.rectangle(width/2, height, width, wallThickness, wallOptions)\n    ];\n\n    Matter.World.add(engine.world, walls);\n\n    // Custom render function for text\n    Matter.Events.on(render, 'afterRender', () => {\n      const ctx = render.context;\n      Object.values(bodiesRef.current).forEach((body) => {\n        const thought = thoughts.find(t => t.id === body.id);\n        if (!thought) return;\n\n        // Draw the rectangle with a subtle shadow\n        const width = 200;\n        const height = 60;\n        const pos = body.position;\n        \n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n        \n        // Add shadow\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';\n        ctx.shadowBlur = 10;\n        ctx.shadowOffsetX = 2;\n        ctx.shadowOffsetY = 2;\n        \n        // Draw rectangle background\n        ctx.fillStyle = '#ffffff';\n        ctx.strokeStyle = '#e0e0e0';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.rect(-width/2, -height/2, width, height);\n        ctx.fill();\n        ctx.stroke();\n        \n        // Reset shadow for text\n        ctx.shadowColor = 'transparent';\n        \n        // Draw text\n        ctx.font = '16px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif';\n        ctx.fillStyle = '#333';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n        \n        ctx.restore();\n      });\n    });\n\n    Matter.Runner.run(Matter.Runner.create(), engine);\n    Matter.Render.run(render);\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = container.clientWidth;\n      const newHeight = container.clientHeight;\n      render.canvas.width = newWidth;\n      render.canvas.height = newHeight;\n      render.options.width = newWidth;\n      render.options.height = newHeight;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      Matter.Events.off(render, 'afterRender');\n      Matter.Render.stop(render);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, []);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach((thought) => {\n      if (!bodiesRef.current[thought.id]) {\n        console.log('Creating new body for thought:', thought);\n        \n        const container = containerRef.current;\n        if (!container) return;\n\n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (container.clientWidth - 2 * margin);\n        const y = margin + Math.random() * (container.clientHeight - 2 * margin);\n\n        const body = Matter.Bodies.rectangle(x, y, 200, 60, {\n          id: thought.id,\n          render: {\n            fillStyle: '#ffffff',\n            strokeStyle: '#e0e0e0',\n            lineWidth: 1\n          },\n          isStatic: thought.isPinned,\n          friction: 0.05,\n          frictionAir: 0.01,\n          restitution: 0.3,\n          chamfer: { radius: 5 }\n        });\n\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n\n  return (\n    <WhiteboardContainer ref={containerRef}>\n      <Canvas ref={canvasRef} />\n    </WhiteboardContainer>\n  );\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}