{"ast":null,"code":"var _jsxFileName = \"/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n_c = Canvas;\nconst Whiteboard = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const engineRef = useRef(null);\n  const renderRef = useRef(null);\n  const thoughtsRef = useRef([]);\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create();\n    engineRef.current = engine;\n\n    // Create renderer\n    const render = Matter.Render.create({\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width: window.innerWidth,\n        height: window.innerHeight - 100,\n        // Account for chat input height\n        wireframes: false,\n        background: 'white'\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = {\n      isStatic: true,\n      render: {\n        visible: false\n      }\n    };\n    const walls = [Matter.Bodies.rectangle(0, render.options.height / 2, 50, render.options.height, wallOptions), Matter.Bodies.rectangle(render.options.width, render.options.height / 2, 50, render.options.height, wallOptions), Matter.Bodies.rectangle(render.options.width / 2, 0, render.options.width, 50, wallOptions), Matter.Bodies.rectangle(render.options.width / 2, render.options.height, render.options.width, 50, wallOptions)];\n    Matter.World.add(engine.world, walls);\n    Matter.Render.run(render);\n\n    // Animation loop\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n\n    // Cleanup\n    return () => {\n      Matter.Render.stop(render);\n      Matter.Runner.stop(runner);\n      Matter.World.clear(engine.world, false);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n};\n_s(Whiteboard, \"3/fG6cD+A1fN0mO+SXWe5c4V5yM=\");\n_c2 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas\");\n$RefreshReg$(_c2, \"Whiteboard\");","map":{"version":3,"names":["React","useEffect","useRef","styled","Matter","jsxDEV","_jsxDEV","Canvas","canvas","_c","Whiteboard","_s","canvasRef","engineRef","renderRef","thoughtsRef","current","engine","Engine","create","render","Render","options","width","window","innerWidth","height","innerHeight","wireframes","background","wallOptions","isStatic","visible","walls","Bodies","rectangle","World","add","world","run","runner","Runner","stop","clear","remove","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\n\nconst Canvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\ninterface Thought {\n  id: number;\n  text: string;\n  position: { x: number; y: number };\n  color: string;\n  size: 'small' | 'medium' | 'large';\n  isPinned: boolean;\n}\n\nconst Whiteboard: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const engineRef = useRef<Matter.Engine | null>(null);\n  const renderRef = useRef<Matter.Render | null>(null);\n  const thoughtsRef = useRef<Thought[]>([]);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create();\n    engineRef.current = engine;\n\n    // Create renderer\n    const render = Matter.Render.create({\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width: window.innerWidth,\n        height: window.innerHeight - 100, // Account for chat input height\n        wireframes: false,\n        background: 'white',\n      },\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = { isStatic: true, render: { visible: false } };\n    const walls = [\n      Matter.Bodies.rectangle(0, render.options.height / 2, 50, render.options.height, wallOptions),\n      Matter.Bodies.rectangle(render.options.width, render.options.height / 2, 50, render.options.height, wallOptions),\n      Matter.Bodies.rectangle(render.options.width / 2, 0, render.options.width, 50, wallOptions),\n      Matter.Bodies.rectangle(render.options.width / 2, render.options.height, render.options.width, 50, wallOptions),\n    ];\n\n    Matter.World.add(engine.world, walls);\n    Matter.Render.run(render);\n\n    // Animation loop\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n\n    // Cleanup\n    return () => {\n      Matter.Render.stop(render);\n      Matter.Runner.stop(runner);\n      Matter.World.clear(engine.world, false);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, []);\n\n  return <Canvas ref={canvasRef} />;\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}