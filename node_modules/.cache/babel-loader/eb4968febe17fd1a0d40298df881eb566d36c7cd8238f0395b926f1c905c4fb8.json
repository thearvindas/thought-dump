{"ast":null,"code":"var _jsxFileName = \"/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n_c = Canvas;\nconst Whiteboard = ({\n  thoughts\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const engineRef = useRef(null);\n  const renderRef = useRef(null);\n  const bodiesRef = useRef([]);\n  const thoughtRefs = useRef({});\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create();\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width: window.innerWidth,\n        height: window.innerHeight - 100,\n        // Account for chat input height\n        wireframes: false,\n        background: 'white'\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = {\n      isStatic: true,\n      render: {\n        visible: false\n      }\n    };\n    const walls = [Matter.Bodies.rectangle(0, window.innerHeight / 2, 50, window.innerHeight, wallOptions), Matter.Bodies.rectangle(window.innerWidth, window.innerHeight / 2, 50, window.innerHeight, wallOptions), Matter.Bodies.rectangle(window.innerWidth / 2, 0, window.innerWidth, 50, wallOptions), Matter.Bodies.rectangle(window.innerWidth / 2, window.innerHeight, window.innerWidth, 50, wallOptions)];\n    Matter.World.add(engine.world, walls);\n\n    // Add text rendering to the afterRender event\n    Matter.Events.on(render, 'afterRender', () => {\n      const ctx = render.context;\n      bodiesRef.current.forEach(body => {\n        const thought = thoughtRefs.current[body.id];\n        if (!thought) return;\n        const center = body.position;\n        ctx.save();\n        ctx.translate(center.x, center.y);\n        ctx.rotate(body.angle);\n        ctx.font = '16px Arial';\n        ctx.fillStyle = '#000000';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n        ctx.restore();\n      });\n    });\n    Matter.Render.run(render);\n\n    // Animation loop\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n\n    // Cleanup\n    return () => {\n      Matter.Events.off(render, 'afterRender');\n      Matter.Render.stop(render);\n      Matter.Runner.stop(runner);\n      Matter.World.clear(engine.world, false);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, []);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current) return;\n    const engine = engineRef.current;\n\n    // Remove old bodies\n    Matter.World.remove(engine.world, bodiesRef.current);\n    bodiesRef.current = [];\n    thoughtRefs.current = {};\n\n    // Create new bodies for each thought\n    thoughts.forEach(thought => {\n      const x = Math.random() * (window.innerWidth - 200) + 100;\n      const y = Math.random() * (window.innerHeight - 200) + 100;\n      const body = Matter.Bodies.rectangle(x, y, 200, 50, {\n        render: {\n          fillStyle: thought.color,\n          strokeStyle: '#000000',\n          lineWidth: 1\n        },\n        isStatic: thought.isPinned\n      });\n\n      // Store thought reference\n      thoughtRefs.current[thought.id] = thought;\n      bodiesRef.current.push(body);\n      Matter.World.add(engine.world, body);\n    });\n  }, [thoughts]);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 10\n  }, this);\n};\n_s(Whiteboard, \"zhhlgqo0TzUN0jBlc5JoaiKgzLQ=\");\n_c2 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas\");\n$RefreshReg$(_c2, \"Whiteboard\");","map":{"version":3,"names":["React","useEffect","useRef","styled","Matter","jsxDEV","_jsxDEV","Canvas","canvas","_c","Whiteboard","thoughts","_s","canvasRef","engineRef","renderRef","bodiesRef","thoughtRefs","current","engine","Engine","create","render","Render","options","width","window","innerWidth","height","innerHeight","wireframes","background","wallOptions","isStatic","visible","walls","Bodies","rectangle","World","add","world","Events","on","ctx","context","forEach","body","thought","id","center","position","save","translate","x","y","rotate","angle","font","fillStyle","textAlign","textBaseline","fillText","text","restore","run","runner","Runner","off","stop","clear","remove","Math","random","color","strokeStyle","lineWidth","isPinned","push","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\n\nconst Canvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\ninterface Thought {\n  id: number;\n  text: string;\n  color: string;\n  size: 'small' | 'medium' | 'large';\n  isPinned: boolean;\n}\n\ninterface WhiteboardProps {\n  thoughts: Thought[];\n}\n\nconst Whiteboard: React.FC<WhiteboardProps> = ({ thoughts }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const engineRef = useRef<Matter.Engine | null>(null);\n  const renderRef = useRef<Matter.Render | null>(null);\n  const bodiesRef = useRef<Matter.Body[]>([]);\n  const thoughtRefs = useRef<{ [key: number]: Thought }>({});\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create();\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width: window.innerWidth,\n        height: window.innerHeight - 100, // Account for chat input height\n        wireframes: false,\n        background: 'white',\n      },\n    } as Matter.IRenderDefinition);\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = { isStatic: true, render: { visible: false } };\n    const walls = [\n      Matter.Bodies.rectangle(0, window.innerHeight / 2, 50, window.innerHeight, wallOptions),\n      Matter.Bodies.rectangle(window.innerWidth, window.innerHeight / 2, 50, window.innerHeight, wallOptions),\n      Matter.Bodies.rectangle(window.innerWidth / 2, 0, window.innerWidth, 50, wallOptions),\n      Matter.Bodies.rectangle(window.innerWidth / 2, window.innerHeight, window.innerWidth, 50, wallOptions),\n    ];\n\n    Matter.World.add(engine.world, walls);\n\n    // Add text rendering to the afterRender event\n    Matter.Events.on(render, 'afterRender', () => {\n      const ctx = render.context;\n      bodiesRef.current.forEach((body) => {\n        const thought = thoughtRefs.current[body.id];\n        if (!thought) return;\n\n        const center = body.position;\n        \n        ctx.save();\n        ctx.translate(center.x, center.y);\n        ctx.rotate(body.angle);\n        \n        ctx.font = '16px Arial';\n        ctx.fillStyle = '#000000';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n        \n        ctx.restore();\n      });\n    });\n\n    Matter.Render.run(render);\n\n    // Animation loop\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n\n    // Cleanup\n    return () => {\n      Matter.Events.off(render, 'afterRender');\n      Matter.Render.stop(render);\n      Matter.Runner.stop(runner);\n      Matter.World.clear(engine.world, false);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, []);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current) return;\n\n    const engine = engineRef.current;\n\n    // Remove old bodies\n    Matter.World.remove(engine.world, bodiesRef.current);\n    bodiesRef.current = [];\n    thoughtRefs.current = {};\n\n    // Create new bodies for each thought\n    thoughts.forEach((thought) => {\n      const x = Math.random() * (window.innerWidth - 200) + 100;\n      const y = Math.random() * (window.innerHeight - 200) + 100;\n      \n      const body = Matter.Bodies.rectangle(x, y, 200, 50, {\n        render: {\n          fillStyle: thought.color,\n          strokeStyle: '#000000',\n          lineWidth: 1,\n        },\n        isStatic: thought.isPinned,\n      });\n\n      // Store thought reference\n      thoughtRefs.current[thought.id] = thought;\n\n      bodiesRef.current.push(body);\n      Matter.World.add(engine.world, body);\n    });\n  }, [thoughts]);\n\n  return <Canvas ref={canvasRef} />;\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}