{"ast":null,"code":"var _jsxFileName = \"/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(100vh - 100px);\n  background: white;\n  overflow: hidden;\n`;\n_c = WhiteboardContainer;\nconst Canvas = styled.canvas`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n`;\n_c2 = Canvas;\nconst Whiteboard = ({\n  thoughts\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const engineRef = useRef(null);\n  const renderRef = useRef(null);\n  const bodiesRef = useRef({});\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    console.log('Initializing Matter.js engine');\n\n    // Get container dimensions\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n    console.log('Container dimensions:', {\n      width,\n      height\n    });\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: {\n        x: 0,\n        y: 0\n      }\n    });\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      element: container,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: false,\n        showVelocity: false,\n        showCollisions: false,\n        background: 'white',\n        pixelRatio: window.devicePixelRatio\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = {\n      isStatic: true,\n      render: {\n        visible: false\n      }\n    };\n    const wallThickness = 60;\n    const walls = [Matter.Bodies.rectangle(0, height / 2, wallThickness, height, wallOptions), Matter.Bodies.rectangle(width, height / 2, wallThickness, height, wallOptions), Matter.Bodies.rectangle(width / 2, 0, width, wallThickness, wallOptions), Matter.Bodies.rectangle(width / 2, height, width, wallThickness, wallOptions)];\n    Matter.World.add(engine.world, walls);\n\n    // Set up rendering loop\n    let animationFrameId;\n    const renderScene = () => {\n      const ctx = render.canvas.getContext('2d');\n      if (!ctx) return;\n\n      // Clear the canvas\n      ctx.clearRect(0, 0, width, height);\n      ctx.fillStyle = 'white';\n      ctx.fillRect(0, 0, width, height);\n\n      // Draw all thoughts\n      Object.values(bodiesRef.current).forEach(body => {\n        const thought = thoughts.find(t => t.id === body.id);\n        if (!thought) return;\n        const pos = body.position;\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n\n        // Draw rectangle with shadow\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';\n        ctx.shadowBlur = 10;\n        ctx.shadowOffsetX = 2;\n        ctx.shadowOffsetY = 2;\n\n        // Draw rectangle\n        ctx.fillStyle = '#ffffff';\n        ctx.strokeStyle = '#e0e0e0';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.roundRect(-100, -30, 200, 60, 5);\n        ctx.fill();\n        ctx.stroke();\n\n        // Reset shadow for text\n        ctx.shadowColor = 'transparent';\n        ctx.shadowBlur = 0;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n\n        // Draw text\n        ctx.font = '16px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif';\n        ctx.fillStyle = '#333';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n        ctx.restore();\n      });\n      animationFrameId = requestAnimationFrame(renderScene);\n    };\n\n    // Start the physics simulation\n    Matter.Runner.run(Matter.Runner.create(), engine);\n    renderScene();\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = container.clientWidth;\n      const newHeight = container.clientHeight;\n      render.canvas.width = newWidth;\n      render.canvas.height = newHeight;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, [thoughts]);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach(thought => {\n      if (!bodiesRef.current[thought.id]) {\n        console.log('Creating new body for thought:', thought);\n        const container = containerRef.current;\n        if (!container) return;\n\n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (container.clientWidth - 2 * margin);\n        const y = margin + Math.random() * (container.clientHeight - 2 * margin);\n        const body = Matter.Bodies.rectangle(x, y, 200, 60, {\n          id: thought.id,\n          render: {\n            visible: false\n          },\n          isStatic: thought.isPinned,\n          friction: 0.05,\n          frictionAir: 0.01,\n          restitution: 0.3\n        });\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n  return /*#__PURE__*/_jsxDEV(WhiteboardContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"0f/TGSg2/xmQP2XYh9CgsLXCJUU=\");\n_c3 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"WhiteboardContainer\");\n$RefreshReg$(_c2, \"Canvas\");\n$RefreshReg$(_c3, \"Whiteboard\");","map":{"version":3,"names":["React","useEffect","useRef","styled","Matter","jsxDEV","_jsxDEV","WhiteboardContainer","div","_c","Canvas","canvas","_c2","Whiteboard","thoughts","_s","containerRef","canvasRef","engineRef","renderRef","bodiesRef","current","console","log","container","width","clientWidth","height","clientHeight","engine","Engine","create","gravity","x","y","render","Render","element","options","wireframes","showVelocity","showCollisions","background","pixelRatio","window","devicePixelRatio","wallOptions","isStatic","visible","wallThickness","walls","Bodies","rectangle","World","add","world","animationFrameId","renderScene","ctx","getContext","clearRect","fillStyle","fillRect","Object","values","forEach","body","thought","find","t","id","pos","position","save","translate","rotate","angle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","strokeStyle","lineWidth","beginPath","roundRect","fill","stroke","font","textAlign","textBaseline","fillText","text","restore","requestAnimationFrame","Runner","run","handleResize","newWidth","newHeight","setPixelRatio","addEventListener","removeEventListener","cancelAnimationFrame","clear","remove","entries","Number","margin","Math","random","isPinned","friction","frictionAir","restitution","Body","setVelocity","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\n\nconst WhiteboardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(100vh - 100px);\n  background: white;\n  overflow: hidden;\n`;\n\nconst Canvas = styled.canvas`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n`;\n\ninterface Thought {\n  id: number;\n  text: string;\n  color: string;\n  size: 'small' | 'medium' | 'large';\n  isPinned: boolean;\n}\n\ninterface WhiteboardProps {\n  thoughts: Thought[];\n}\n\nconst Whiteboard: React.FC<WhiteboardProps> = ({ thoughts }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const engineRef = useRef<Matter.Engine | null>(null);\n  const renderRef = useRef<Matter.Render | null>(null);\n  const bodiesRef = useRef<{ [key: number]: Matter.Body }>({});\n\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n\n    console.log('Initializing Matter.js engine');\n\n    // Get container dimensions\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n\n    console.log('Container dimensions:', { width, height });\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: { x: 0, y: 0 }\n    });\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      element: container,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: false,\n        showVelocity: false,\n        showCollisions: false,\n        background: 'white',\n        pixelRatio: window.devicePixelRatio\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = { \n      isStatic: true,\n      render: { visible: false }\n    };\n\n    const wallThickness = 60;\n    const walls = [\n      Matter.Bodies.rectangle(0, height/2, wallThickness, height, wallOptions),\n      Matter.Bodies.rectangle(width, height/2, wallThickness, height, wallOptions),\n      Matter.Bodies.rectangle(width/2, 0, width, wallThickness, wallOptions),\n      Matter.Bodies.rectangle(width/2, height, width, wallThickness, wallOptions)\n    ];\n\n    Matter.World.add(engine.world, walls);\n\n    // Set up rendering loop\n    let animationFrameId: number;\n    \n    const renderScene = () => {\n      const ctx = render.canvas.getContext('2d');\n      if (!ctx) return;\n\n      // Clear the canvas\n      ctx.clearRect(0, 0, width, height);\n      ctx.fillStyle = 'white';\n      ctx.fillRect(0, 0, width, height);\n\n      // Draw all thoughts\n      Object.values(bodiesRef.current).forEach((body) => {\n        const thought = thoughts.find(t => t.id === body.id);\n        if (!thought) return;\n\n        const pos = body.position;\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n\n        // Draw rectangle with shadow\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';\n        ctx.shadowBlur = 10;\n        ctx.shadowOffsetX = 2;\n        ctx.shadowOffsetY = 2;\n\n        // Draw rectangle\n        ctx.fillStyle = '#ffffff';\n        ctx.strokeStyle = '#e0e0e0';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.roundRect(-100, -30, 200, 60, 5);\n        ctx.fill();\n        ctx.stroke();\n\n        // Reset shadow for text\n        ctx.shadowColor = 'transparent';\n        ctx.shadowBlur = 0;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n\n        // Draw text\n        ctx.font = '16px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif';\n        ctx.fillStyle = '#333';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n\n        ctx.restore();\n      });\n\n      animationFrameId = requestAnimationFrame(renderScene);\n    };\n\n    // Start the physics simulation\n    Matter.Runner.run(Matter.Runner.create(), engine);\n    renderScene();\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = container.clientWidth;\n      const newHeight = container.clientHeight;\n      render.canvas.width = newWidth;\n      render.canvas.height = newHeight;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, [thoughts]);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach((thought) => {\n      if (!bodiesRef.current[thought.id]) {\n        console.log('Creating new body for thought:', thought);\n        \n        const container = containerRef.current;\n        if (!container) return;\n\n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (container.clientWidth - 2 * margin);\n        const y = margin + Math.random() * (container.clientHeight - 2 * margin);\n\n        const body = Matter.Bodies.rectangle(x, y, 200, 60, {\n          id: thought.id,\n          render: {\n            visible: false\n          },\n          isStatic: thought.isPinned,\n          friction: 0.05,\n          frictionAir: 0.01,\n          restitution: 0.3\n        });\n\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n\n  return (\n    <WhiteboardContainer ref={containerRef}>\n      <Canvas ref={canvasRef} />\n    </WhiteboardContainer>\n  );\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}