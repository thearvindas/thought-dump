{"ast":null,"code":"var _jsxFileName = \"/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(100vh - 100px);\n  background: white;\n  overflow: hidden;\n  cursor: default;\n  \n  &.dragging {\n    cursor: grabbing;\n  }\n`;\n_c = WhiteboardContainer;\nconst Canvas = styled.canvas`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n`;\n_c2 = Canvas;\nconst Whiteboard = ({\n  thoughts\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const engineRef = useRef(null);\n  const renderRef = useRef(null);\n  const bodiesRef = useRef({});\n  const mouseConstraintRef = useRef(null);\n  const isDraggingRef = useRef(false);\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    console.log('Initializing Matter.js engine');\n\n    // Get container dimensions\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n    console.log('Container dimensions:', {\n      width,\n      height\n    });\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: {\n        x: 0,\n        y: 0\n      }\n    });\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      element: container,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: false,\n        showVelocity: false,\n        showCollisions: false,\n        background: 'white',\n        pixelRatio: window.devicePixelRatio\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = {\n      isStatic: true,\n      render: {\n        visible: false\n      }\n    };\n    const wallThickness = 60;\n    const walls = [Matter.Bodies.rectangle(0, height / 2, wallThickness, height, wallOptions), Matter.Bodies.rectangle(width, height / 2, wallThickness, height, wallOptions), Matter.Bodies.rectangle(width / 2, 0, width, wallThickness, wallOptions), Matter.Bodies.rectangle(width / 2, height, width, wallThickness, wallOptions)];\n    Matter.World.add(engine.world, walls);\n\n    // Create mouse constraint BEFORE setting up the rendering loop\n    const mouse = Matter.Mouse.create(render.canvas);\n    const mouseConstraint = Matter.MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        damping: 0.1,\n        render: {\n          visible: false\n        }\n      }\n    });\n    mouseConstraintRef.current = mouseConstraint;\n    Matter.World.add(engine.world, mouseConstraint);\n\n    // Let Matter.js handle the rendering\n    Matter.Render.run(render);\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n\n    // Set up text rendering\n    let animationFrameId;\n    const renderText = () => {\n      const ctx = render.canvas.getContext('2d');\n      if (!ctx) return;\n\n      // Draw all thought texts\n      Object.values(bodiesRef.current).forEach(body => {\n        const thought = thoughts.find(t => t.id === body.id);\n        if (!thought) return;\n        const pos = body.position;\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n\n        // Draw text with subtle shadow\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';\n        ctx.shadowBlur = 4;\n        ctx.shadowOffsetX = 1;\n        ctx.shadowOffsetY = 1;\n        ctx.font = '18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif';\n        ctx.fillStyle = '#333';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n        ctx.restore();\n      });\n      animationFrameId = requestAnimationFrame(renderText);\n    };\n    renderText();\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = container.clientWidth;\n      const newHeight = container.clientHeight;\n      render.canvas.width = newWidth;\n      render.canvas.height = newHeight;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Handle mouse events for cursor changes\n    Matter.Events.on(mouseConstraint, 'mousemove', event => {\n      const mousePosition = event.mouse.position;\n      const bodiesAtPoint = Matter.Query.point(Object.values(bodiesRef.current), mousePosition);\n      render.canvas.style.cursor = bodiesAtPoint.length > 0 ? 'grab' : 'default';\n    });\n    Matter.Events.on(mouseConstraint, 'startdrag', () => {\n      render.canvas.style.cursor = 'grabbing';\n    });\n    Matter.Events.on(mouseConstraint, 'enddrag', () => {\n      render.canvas.style.cursor = 'grab';\n    });\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n      Matter.Events.off(mouseConstraint, 'mousemove');\n      Matter.Events.off(mouseConstraint, 'startdrag');\n      Matter.Events.off(mouseConstraint, 'enddrag');\n      Matter.World.remove(engine.world, mouseConstraint);\n      Matter.Render.stop(render);\n      Matter.Runner.stop(runner);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, [thoughts]);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach(thought => {\n      if (bodiesRef.current[thought.id]) {\n        // Update existing body properties\n        const body = bodiesRef.current[thought.id];\n        Matter.Body.set(body, {\n          isStatic: thought.isPinned,\n          isSleeping: false,\n          friction: 0.05,\n          frictionAir: 0.02,\n          restitution: 0.3\n        });\n        // Ensure the body is awake and can be interacted with\n        Matter.Sleeping.set(body, false);\n      } else {\n        console.log('Creating new body for thought:', thought);\n        const container = containerRef.current;\n        if (!container) return;\n\n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (container.clientWidth - 2 * margin);\n        const y = margin + Math.random() * (container.clientHeight - 2 * margin);\n        const body = Matter.Bodies.circle(x, y, 40, {\n          id: thought.id,\n          render: {\n            visible: false\n          },\n          isStatic: thought.isPinned,\n          isSleeping: false,\n          friction: 0.05,\n          frictionAir: 0.02,\n          restitution: 0.3,\n          mass: 1,\n          inertia: Infinity,\n          collisionFilter: {\n            category: 0x0001,\n            mask: 0xFFFFFF\n          }\n        });\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n  return /*#__PURE__*/_jsxDEV(WhiteboardContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"Ezc1zHUeC+kA6tpoOMLonz9rM/k=\");\n_c3 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"WhiteboardContainer\");\n$RefreshReg$(_c2, \"Canvas\");\n$RefreshReg$(_c3, \"Whiteboard\");","map":{"version":3,"names":["React","useEffect","useRef","styled","Matter","jsxDEV","_jsxDEV","WhiteboardContainer","div","_c","Canvas","canvas","_c2","Whiteboard","thoughts","_s","containerRef","canvasRef","engineRef","renderRef","bodiesRef","mouseConstraintRef","isDraggingRef","current","console","log","container","width","clientWidth","height","clientHeight","engine","Engine","create","gravity","x","y","render","Render","element","options","wireframes","showVelocity","showCollisions","background","pixelRatio","window","devicePixelRatio","wallOptions","isStatic","visible","wallThickness","walls","Bodies","rectangle","World","add","world","mouse","Mouse","mouseConstraint","MouseConstraint","constraint","stiffness","damping","run","runner","Runner","animationFrameId","renderText","ctx","getContext","Object","values","forEach","body","thought","find","t","id","pos","position","save","translate","rotate","angle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","font","fillStyle","textAlign","textBaseline","fillText","text","restore","requestAnimationFrame","handleResize","newWidth","newHeight","setPixelRatio","addEventListener","Events","on","event","mousePosition","bodiesAtPoint","Query","point","style","cursor","length","removeEventListener","cancelAnimationFrame","off","remove","stop","clear","entries","Number","Body","set","isPinned","isSleeping","friction","frictionAir","restitution","Sleeping","margin","Math","random","circle","mass","inertia","Infinity","collisionFilter","category","mask","setVelocity","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\n\nconst WhiteboardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(100vh - 100px);\n  background: white;\n  overflow: hidden;\n  cursor: default;\n  \n  &.dragging {\n    cursor: grabbing;\n  }\n`;\n\nconst Canvas = styled.canvas`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n`;\n\ninterface Thought {\n  id: number;\n  text: string;\n  color: string;\n  size: 'small' | 'medium' | 'large';\n  isPinned: boolean;\n}\n\ninterface WhiteboardProps {\n  thoughts: Thought[];\n}\n\nconst Whiteboard: React.FC<WhiteboardProps> = ({ thoughts }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const engineRef = useRef<Matter.Engine | null>(null);\n  const renderRef = useRef<Matter.Render | null>(null);\n  const bodiesRef = useRef<{ [key: number]: Matter.Body }>({});\n  const mouseConstraintRef = useRef<Matter.MouseConstraint | null>(null);\n  const isDraggingRef = useRef(false);\n\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n\n    console.log('Initializing Matter.js engine');\n\n    // Get container dimensions\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n\n    console.log('Container dimensions:', { width, height });\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: { x: 0, y: 0 }\n    });\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      element: container,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: false,\n        showVelocity: false,\n        showCollisions: false,\n        background: 'white',\n        pixelRatio: window.devicePixelRatio\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = { \n      isStatic: true,\n      render: { visible: false }\n    };\n\n    const wallThickness = 60;\n    const walls = [\n      Matter.Bodies.rectangle(0, height/2, wallThickness, height, wallOptions),\n      Matter.Bodies.rectangle(width, height/2, wallThickness, height, wallOptions),\n      Matter.Bodies.rectangle(width/2, 0, width, wallThickness, wallOptions),\n      Matter.Bodies.rectangle(width/2, height, width, wallThickness, wallOptions)\n    ];\n\n    Matter.World.add(engine.world, walls);\n\n    // Create mouse constraint BEFORE setting up the rendering loop\n    const mouse = Matter.Mouse.create(render.canvas);\n    const mouseConstraint = Matter.MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        damping: 0.1,\n        render: {\n          visible: false\n        }\n      }\n    });\n\n    mouseConstraintRef.current = mouseConstraint;\n    Matter.World.add(engine.world, mouseConstraint);\n\n    // Let Matter.js handle the rendering\n    Matter.Render.run(render);\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n\n    // Set up text rendering\n    let animationFrameId: number;\n    const renderText = () => {\n      const ctx = render.canvas.getContext('2d');\n      if (!ctx) return;\n\n      // Draw all thought texts\n      Object.values(bodiesRef.current).forEach((body) => {\n        const thought = thoughts.find(t => t.id === body.id);\n        if (!thought) return;\n\n        const pos = body.position;\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n\n        // Draw text with subtle shadow\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';\n        ctx.shadowBlur = 4;\n        ctx.shadowOffsetX = 1;\n        ctx.shadowOffsetY = 1;\n\n        ctx.font = '18px -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif';\n        ctx.fillStyle = '#333';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n\n        ctx.restore();\n      });\n\n      animationFrameId = requestAnimationFrame(renderText);\n    };\n\n    renderText();\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = container.clientWidth;\n      const newHeight = container.clientHeight;\n      render.canvas.width = newWidth;\n      render.canvas.height = newHeight;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Handle mouse events for cursor changes\n    Matter.Events.on(mouseConstraint, 'mousemove', (event) => {\n      const mousePosition = event.mouse.position;\n      const bodiesAtPoint = Matter.Query.point(Object.values(bodiesRef.current), mousePosition);\n      render.canvas.style.cursor = bodiesAtPoint.length > 0 ? 'grab' : 'default';\n    });\n\n    Matter.Events.on(mouseConstraint, 'startdrag', () => {\n      render.canvas.style.cursor = 'grabbing';\n    });\n\n    Matter.Events.on(mouseConstraint, 'enddrag', () => {\n      render.canvas.style.cursor = 'grab';\n    });\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n      Matter.Events.off(mouseConstraint, 'mousemove');\n      Matter.Events.off(mouseConstraint, 'startdrag');\n      Matter.Events.off(mouseConstraint, 'enddrag');\n      Matter.World.remove(engine.world, mouseConstraint);\n      Matter.Render.stop(render);\n      Matter.Runner.stop(runner);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, [thoughts]);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach((thought) => {\n      if (bodiesRef.current[thought.id]) {\n        // Update existing body properties\n        const body = bodiesRef.current[thought.id];\n        Matter.Body.set(body, {\n          isStatic: thought.isPinned,\n          isSleeping: false,\n          friction: 0.05,\n          frictionAir: 0.02,\n          restitution: 0.3\n        });\n        // Ensure the body is awake and can be interacted with\n        Matter.Sleeping.set(body, false);\n      } else {\n        console.log('Creating new body for thought:', thought);\n        \n        const container = containerRef.current;\n        if (!container) return;\n\n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (container.clientWidth - 2 * margin);\n        const y = margin + Math.random() * (container.clientHeight - 2 * margin);\n\n        const body = Matter.Bodies.circle(x, y, 40, {\n          id: thought.id,\n          render: {\n            visible: false\n          },\n          isStatic: thought.isPinned,\n          isSleeping: false,\n          friction: 0.05,\n          frictionAir: 0.02,\n          restitution: 0.3,\n          mass: 1,\n          inertia: Infinity,\n          collisionFilter: {\n            category: 0x0001,\n            mask: 0xFFFFFF\n          }\n        });\n\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n\n  return (\n    <WhiteboardContainer ref={containerRef}>\n      <Canvas ref={canvasRef} />\n    </WhiteboardContainer>\n  );\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}