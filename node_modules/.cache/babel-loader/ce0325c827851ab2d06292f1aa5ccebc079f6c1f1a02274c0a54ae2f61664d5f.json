{"ast":null,"code":"var _jsxFileName = \"/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: calc(100vh - 100px); // Explicit height calculation\n  border: 1px solid #ccc; // Debug border\n`;\n_c = Canvas;\nconst Whiteboard = ({\n  thoughts\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const engineRef = useRef(null);\n  const renderRef = useRef(null);\n  const bodiesRef = useRef({});\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    console.log('Initializing Matter.js engine');\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: {\n        x: 0,\n        y: 0\n      }\n    });\n    engineRef.current = engine;\n    const width = window.innerWidth;\n    const height = window.innerHeight - 100;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      element: canvasRef.current.parentElement || undefined,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: true,\n        // Enable wireframes for debugging\n        showVelocity: true,\n        // Show velocity for debugging\n        showCollisions: true,\n        // Show collisions for debugging\n        background: '#f0f0f0'\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = {\n      isStatic: true,\n      render: {\n        visible: true,\n        // Make walls visible for debugging\n        fillStyle: '#e0e0e0',\n        strokeStyle: '#c0c0c0'\n      }\n    };\n    const wallThickness = 60;\n    const walls = [\n    // Left wall\n    Matter.Bodies.rectangle(0, height / 2, wallThickness, height, wallOptions),\n    // Right wall\n    Matter.Bodies.rectangle(width, height / 2, wallThickness, height, wallOptions),\n    // Top wall\n    Matter.Bodies.rectangle(width / 2, 0, width, wallThickness, wallOptions),\n    // Bottom wall\n    Matter.Bodies.rectangle(width / 2, height, width, wallThickness, wallOptions)];\n    Matter.World.add(engine.world, walls);\n\n    // Add a visible debug body to ensure physics is working\n    const debugBody = Matter.Bodies.circle(width / 2, height / 2, 30, {\n      render: {\n        fillStyle: 'red'\n      }\n    });\n    Matter.World.add(engine.world, debugBody);\n    Matter.Body.setVelocity(debugBody, {\n      x: 5,\n      y: -5\n    });\n\n    // Custom render function for text\n    Matter.Events.on(render, 'afterRender', () => {\n      const ctx = render.context;\n      Object.values(bodiesRef.current).forEach(body => {\n        const thought = thoughts.find(t => t.id === body.id);\n        if (!thought) return;\n        const pos = body.position;\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n        ctx.font = '24px Arial'; // Larger font for visibility\n        ctx.fillStyle = '#000';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n        ctx.restore();\n      });\n    });\n    Matter.Runner.run(Matter.Runner.create(), engine);\n    Matter.Render.run(render);\n\n    // Handle window resize\n    const handleResize = () => {\n      render.canvas.width = window.innerWidth;\n      render.canvas.height = window.innerHeight - 100;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      Matter.Events.off(render, 'afterRender');\n      Matter.Render.stop(render);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, []);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach(thought => {\n      if (!bodiesRef.current[thought.id]) {\n        console.log('Creating new body for thought:', thought);\n\n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (window.innerWidth - 2 * margin);\n        const y = margin + Math.random() * (window.innerHeight - 200);\n        const body = Matter.Bodies.rectangle(x, y, 200, 60, {\n          id: thought.id,\n          render: {\n            fillStyle: '#ffffff',\n            strokeStyle: '#000000',\n            lineWidth: 2\n          },\n          isStatic: thought.isPinned,\n          friction: 0.1,\n          frictionAir: 0.02,\n          restitution: 0.5\n        });\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 10\n  }, this);\n};\n_s(Whiteboard, \"3JVBvZnEeW01iQQdtHj5mp7oGGw=\");\n_c2 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas\");\n$RefreshReg$(_c2, \"Whiteboard\");","map":{"version":3,"names":["React","useEffect","useRef","styled","Matter","jsxDEV","_jsxDEV","Canvas","canvas","_c","Whiteboard","thoughts","_s","canvasRef","engineRef","renderRef","bodiesRef","current","console","log","engine","Engine","create","gravity","x","y","width","window","innerWidth","height","innerHeight","render","Render","element","parentElement","undefined","options","wireframes","showVelocity","showCollisions","background","wallOptions","isStatic","visible","fillStyle","strokeStyle","wallThickness","walls","Bodies","rectangle","World","add","world","debugBody","circle","Body","setVelocity","Events","on","ctx","context","Object","values","forEach","body","thought","find","t","id","pos","position","save","translate","rotate","angle","font","textAlign","textBaseline","fillText","text","restore","Runner","run","handleResize","setPixelRatio","devicePixelRatio","addEventListener","removeEventListener","off","stop","clear","remove","entries","Number","margin","Math","random","lineWidth","isPinned","friction","frictionAir","restitution","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\n\nconst Canvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: calc(100vh - 100px); // Explicit height calculation\n  border: 1px solid #ccc; // Debug border\n`;\n\ninterface Thought {\n  id: number;\n  text: string;\n  color: string;\n  size: 'small' | 'medium' | 'large';\n  isPinned: boolean;\n}\n\ninterface WhiteboardProps {\n  thoughts: Thought[];\n}\n\nconst Whiteboard: React.FC<WhiteboardProps> = ({ thoughts }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const engineRef = useRef<Matter.Engine | null>(null);\n  const renderRef = useRef<Matter.Render | null>(null);\n  const bodiesRef = useRef<{ [key: number]: Matter.Body }>({});\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    console.log('Initializing Matter.js engine');\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: { x: 0, y: 0 }\n    });\n    engineRef.current = engine;\n\n    const width = window.innerWidth;\n    const height = window.innerHeight - 100;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      element: canvasRef.current.parentElement || undefined,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: true, // Enable wireframes for debugging\n        showVelocity: true, // Show velocity for debugging\n        showCollisions: true, // Show collisions for debugging\n        background: '#f0f0f0',\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = { \n      isStatic: true,\n      render: { \n        visible: true, // Make walls visible for debugging\n        fillStyle: '#e0e0e0',\n        strokeStyle: '#c0c0c0'\n      }\n    };\n\n    const wallThickness = 60;\n    const walls = [\n      // Left wall\n      Matter.Bodies.rectangle(0, height/2, wallThickness, height, wallOptions),\n      // Right wall\n      Matter.Bodies.rectangle(width, height/2, wallThickness, height, wallOptions),\n      // Top wall\n      Matter.Bodies.rectangle(width/2, 0, width, wallThickness, wallOptions),\n      // Bottom wall\n      Matter.Bodies.rectangle(width/2, height, width, wallThickness, wallOptions)\n    ];\n\n    Matter.World.add(engine.world, walls);\n\n    // Add a visible debug body to ensure physics is working\n    const debugBody = Matter.Bodies.circle(width/2, height/2, 30, {\n      render: {\n        fillStyle: 'red'\n      }\n    });\n    Matter.World.add(engine.world, debugBody);\n    Matter.Body.setVelocity(debugBody, { x: 5, y: -5 });\n\n    // Custom render function for text\n    Matter.Events.on(render, 'afterRender', () => {\n      const ctx = render.context;\n      Object.values(bodiesRef.current).forEach((body) => {\n        const thought = thoughts.find(t => t.id === body.id);\n        if (!thought) return;\n\n        const pos = body.position;\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n        ctx.font = '24px Arial'; // Larger font for visibility\n        ctx.fillStyle = '#000';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n        ctx.restore();\n      });\n    });\n\n    Matter.Runner.run(Matter.Runner.create(), engine);\n    Matter.Render.run(render);\n\n    // Handle window resize\n    const handleResize = () => {\n      render.canvas.width = window.innerWidth;\n      render.canvas.height = window.innerHeight - 100;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      Matter.Events.off(render, 'afterRender');\n      Matter.Render.stop(render);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, []);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach((thought) => {\n      if (!bodiesRef.current[thought.id]) {\n        console.log('Creating new body for thought:', thought);\n        \n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (window.innerWidth - 2 * margin);\n        const y = margin + Math.random() * (window.innerHeight - 200);\n\n        const body = Matter.Bodies.rectangle(x, y, 200, 60, {\n          id: thought.id,\n          render: {\n            fillStyle: '#ffffff',\n            strokeStyle: '#000000',\n            lineWidth: 2\n          },\n          isStatic: thought.isPinned,\n          friction: 0.1,\n          frictionAir: 0.02,\n          restitution: 0.5\n        });\n\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n\n  return <Canvas ref={canvasRef} />;\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}