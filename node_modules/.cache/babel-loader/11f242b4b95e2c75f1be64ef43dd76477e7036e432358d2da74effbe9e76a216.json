{"ast":null,"code":"var _jsxFileName = \"/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(100vh - 100px);\n  background: white;\n  overflow: hidden;\n  cursor: default;\n  \n  &.dragging {\n    cursor: grabbing;\n  }\n`;\n_c = WhiteboardContainer;\nconst Canvas = styled.canvas`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n`;\n_c2 = Canvas;\nconst Whiteboard = ({\n  thoughts\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const engineRef = useRef(null);\n  const renderRef = useRef(null);\n  const bodiesRef = useRef({});\n  const mouseConstraintRef = useRef(null);\n  const isDraggingRef = useRef(false);\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    console.log('Initializing Matter.js engine');\n\n    // Get container dimensions\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n    console.log('Container dimensions:', {\n      width,\n      height\n    });\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: {\n        x: 0,\n        y: 0\n      }\n    });\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      element: container,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: false,\n        showVelocity: false,\n        showCollisions: false,\n        background: 'white',\n        pixelRatio: window.devicePixelRatio\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = {\n      isStatic: true,\n      render: {\n        visible: false\n      }\n    };\n    const wallThickness = 60;\n    const walls = [Matter.Bodies.rectangle(0, height / 2, wallThickness, height, wallOptions), Matter.Bodies.rectangle(width, height / 2, wallThickness, height, wallOptions), Matter.Bodies.rectangle(width / 2, 0, width, wallThickness, wallOptions), Matter.Bodies.rectangle(width / 2, height, width, wallThickness, wallOptions)];\n    Matter.World.add(engine.world, walls);\n\n    // Create mouse constraint BEFORE setting up the rendering loop\n    const mouse = Matter.Mouse.create(render.canvas);\n    const mouseConstraint = Matter.MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        damping: 0.1,\n        render: {\n          visible: false\n        }\n      }\n    });\n    mouseConstraintRef.current = mouseConstraint;\n    Matter.World.add(engine.world, mouseConstraint);\n\n    // Let Matter.js handle the rendering\n    Matter.Render.run(render);\n    Matter.Runner.run(engine);\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = container.clientWidth;\n      const newHeight = container.clientHeight;\n      render.canvas.width = newWidth;\n      render.canvas.height = newHeight;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Handle mouse events for cursor changes\n    Matter.Events.on(mouseConstraint, 'mousemove', event => {\n      const mousePosition = event.mouse.position;\n      const bodiesAtPoint = Matter.Query.point(Object.values(bodiesRef.current), mousePosition);\n      render.canvas.style.cursor = bodiesAtPoint.length > 0 ? 'grab' : 'default';\n    });\n    Matter.Events.on(mouseConstraint, 'startdrag', () => {\n      render.canvas.style.cursor = 'grabbing';\n    });\n    Matter.Events.on(mouseConstraint, 'enddrag', () => {\n      render.canvas.style.cursor = 'grab';\n    });\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      Matter.Events.off(mouseConstraint, 'mousemove');\n      Matter.Events.off(mouseConstraint, 'startdrag');\n      Matter.Events.off(mouseConstraint, 'enddrag');\n      Matter.World.remove(engine.world, mouseConstraint);\n      Matter.Render.stop(render);\n      Matter.Runner.stop(engine);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, [thoughts]);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach(thought => {\n      if (!bodiesRef.current[thought.id]) {\n        console.log('Creating new body for thought:', thought);\n        const container = containerRef.current;\n        if (!container) return;\n\n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (container.clientWidth - 2 * margin);\n        const y = margin + Math.random() * (container.clientHeight - 2 * margin);\n        const body = Matter.Bodies.circle(x, y, 40, {\n          id: thought.id,\n          render: {\n            fillStyle: '#fff',\n            strokeStyle: '#333',\n            lineWidth: 1\n          },\n          isStatic: thought.isPinned,\n          friction: 0.05,\n          frictionAir: 0.02,\n          restitution: 0.3,\n          mass: 1,\n          inertia: Infinity,\n          collisionFilter: {\n            category: 0x0001,\n            mask: 0xFFFFFF\n          }\n        });\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n  return /*#__PURE__*/_jsxDEV(WhiteboardContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"Ezc1zHUeC+kA6tpoOMLonz9rM/k=\");\n_c3 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"WhiteboardContainer\");\n$RefreshReg$(_c2, \"Canvas\");\n$RefreshReg$(_c3, \"Whiteboard\");","map":{"version":3,"names":["React","useEffect","useRef","styled","Matter","jsxDEV","_jsxDEV","WhiteboardContainer","div","_c","Canvas","canvas","_c2","Whiteboard","thoughts","_s","containerRef","canvasRef","engineRef","renderRef","bodiesRef","mouseConstraintRef","isDraggingRef","current","console","log","container","width","clientWidth","height","clientHeight","engine","Engine","create","gravity","x","y","render","Render","element","options","wireframes","showVelocity","showCollisions","background","pixelRatio","window","devicePixelRatio","wallOptions","isStatic","visible","wallThickness","walls","Bodies","rectangle","World","add","world","mouse","Mouse","mouseConstraint","MouseConstraint","constraint","stiffness","damping","run","Runner","handleResize","newWidth","newHeight","setPixelRatio","addEventListener","Events","on","event","mousePosition","position","bodiesAtPoint","Query","point","Object","values","style","cursor","length","removeEventListener","off","remove","stop","clear","entries","forEach","id","body","find","t","Number","thought","margin","Math","random","circle","fillStyle","strokeStyle","lineWidth","isPinned","friction","frictionAir","restitution","mass","inertia","Infinity","collisionFilter","category","mask","Body","setVelocity","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\n\nconst WhiteboardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(100vh - 100px);\n  background: white;\n  overflow: hidden;\n  cursor: default;\n  \n  &.dragging {\n    cursor: grabbing;\n  }\n`;\n\nconst Canvas = styled.canvas`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n`;\n\ninterface Thought {\n  id: number;\n  text: string;\n  color: string;\n  size: 'small' | 'medium' | 'large';\n  isPinned: boolean;\n}\n\ninterface WhiteboardProps {\n  thoughts: Thought[];\n}\n\nconst Whiteboard: React.FC<WhiteboardProps> = ({ thoughts }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const engineRef = useRef<Matter.Engine | null>(null);\n  const renderRef = useRef<Matter.Render | null>(null);\n  const bodiesRef = useRef<{ [key: number]: Matter.Body }>({});\n  const mouseConstraintRef = useRef<Matter.MouseConstraint | null>(null);\n  const isDraggingRef = useRef(false);\n\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n\n    console.log('Initializing Matter.js engine');\n\n    // Get container dimensions\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n\n    console.log('Container dimensions:', { width, height });\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: { x: 0, y: 0 }\n    });\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      element: container,\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width,\n        height,\n        wireframes: false,\n        showVelocity: false,\n        showCollisions: false,\n        background: 'white',\n        pixelRatio: window.devicePixelRatio\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = { \n      isStatic: true,\n      render: { visible: false }\n    };\n\n    const wallThickness = 60;\n    const walls = [\n      Matter.Bodies.rectangle(0, height/2, wallThickness, height, wallOptions),\n      Matter.Bodies.rectangle(width, height/2, wallThickness, height, wallOptions),\n      Matter.Bodies.rectangle(width/2, 0, width, wallThickness, wallOptions),\n      Matter.Bodies.rectangle(width/2, height, width, wallThickness, wallOptions)\n    ];\n\n    Matter.World.add(engine.world, walls);\n\n    // Create mouse constraint BEFORE setting up the rendering loop\n    const mouse = Matter.Mouse.create(render.canvas);\n    const mouseConstraint = Matter.MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        damping: 0.1,\n        render: {\n          visible: false\n        }\n      }\n    });\n\n    mouseConstraintRef.current = mouseConstraint;\n    Matter.World.add(engine.world, mouseConstraint);\n\n    // Let Matter.js handle the rendering\n    Matter.Render.run(render);\n    Matter.Runner.run(engine);\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = container.clientWidth;\n      const newHeight = container.clientHeight;\n      render.canvas.width = newWidth;\n      render.canvas.height = newHeight;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Handle mouse events for cursor changes\n    Matter.Events.on(mouseConstraint, 'mousemove', (event) => {\n      const mousePosition = event.mouse.position;\n      const bodiesAtPoint = Matter.Query.point(Object.values(bodiesRef.current), mousePosition);\n      render.canvas.style.cursor = bodiesAtPoint.length > 0 ? 'grab' : 'default';\n    });\n\n    Matter.Events.on(mouseConstraint, 'startdrag', () => {\n      render.canvas.style.cursor = 'grabbing';\n    });\n\n    Matter.Events.on(mouseConstraint, 'enddrag', () => {\n      render.canvas.style.cursor = 'grab';\n    });\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      Matter.Events.off(mouseConstraint, 'mousemove');\n      Matter.Events.off(mouseConstraint, 'startdrag');\n      Matter.Events.off(mouseConstraint, 'enddrag');\n      Matter.World.remove(engine.world, mouseConstraint);\n      Matter.Render.stop(render);\n      Matter.Runner.stop(engine);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, [thoughts]);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach((thought) => {\n      if (!bodiesRef.current[thought.id]) {\n        console.log('Creating new body for thought:', thought);\n        \n        const container = containerRef.current;\n        if (!container) return;\n\n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (container.clientWidth - 2 * margin);\n        const y = margin + Math.random() * (container.clientHeight - 2 * margin);\n\n        const body = Matter.Bodies.circle(x, y, 40, {\n          id: thought.id,\n          render: {\n            fillStyle: '#fff',\n            strokeStyle: '#333',\n            lineWidth: 1\n          },\n          isStatic: thought.isPinned,\n          friction: 0.05,\n          frictionAir: 0.02,\n          restitution: 0.3,\n          mass: 1,\n          inertia: Infinity,\n          collisionFilter: {\n            category: 0x0001,\n            mask: 0xFFFFFF\n          }\n        });\n\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n\n  return (\n    <WhiteboardContainer ref={containerRef}>\n      <Canvas ref={canvasRef} />\n    </WhiteboardContainer>\n  );\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}