{"ast":null,"code":"var _jsxFileName = \"/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n_c = Canvas;\nconst Whiteboard = ({\n  thoughts\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const engineRef = useRef(null);\n  const renderRef = useRef(null);\n  const bodiesRef = useRef({});\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    console.log('Initializing Matter.js engine');\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: {\n        x: 0,\n        y: 0\n      } // Disable gravity\n    });\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width: window.innerWidth,\n        height: window.innerHeight - 100,\n        wireframes: false,\n        background: 'white'\n      }\n    });\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = {\n      isStatic: true,\n      render: {\n        visible: false\n      }\n    };\n    const walls = [Matter.Bodies.rectangle(-50, window.innerHeight / 2, 100, window.innerHeight, wallOptions), Matter.Bodies.rectangle(window.innerWidth + 50, window.innerHeight / 2, 100, window.innerHeight, wallOptions), Matter.Bodies.rectangle(window.innerWidth / 2, -50, window.innerWidth, 100, wallOptions), Matter.Bodies.rectangle(window.innerWidth / 2, window.innerHeight + 50, window.innerWidth, 100, wallOptions)];\n    Matter.World.add(engine.world, walls);\n\n    // Custom render function for text\n    Matter.Events.on(render, 'afterRender', () => {\n      const ctx = render.context;\n      Object.values(bodiesRef.current).forEach(body => {\n        const thought = thoughts.find(t => t.id === body.id);\n        if (!thought) return;\n        const pos = body.position;\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n        ctx.font = '16px Arial';\n        ctx.fillStyle = '#000';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n        ctx.restore();\n      });\n    });\n    Matter.Render.run(render);\n    Matter.Runner.run(Matter.Runner.create(), engine);\n\n    // Handle window resize\n    const handleResize = () => {\n      render.canvas.width = window.innerWidth;\n      render.canvas.height = window.innerHeight - 100;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      Matter.Events.off(render, 'afterRender');\n      Matter.Render.stop(render);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, []);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach(thought => {\n      if (!bodiesRef.current[thought.id]) {\n        console.log('Creating new body for thought:', thought);\n\n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (window.innerWidth - 2 * margin);\n        const y = margin + Math.random() * (window.innerHeight - 200);\n        const body = Matter.Bodies.rectangle(x, y, 200, 60, {\n          id: thought.id,\n          render: {\n            fillStyle: '#ffffff',\n            strokeStyle: '#000000',\n            lineWidth: 1\n          },\n          isStatic: thought.isPinned,\n          friction: 0.1,\n          frictionAir: 0.02,\n          restitution: 0.5\n        });\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 10\n  }, this);\n};\n_s(Whiteboard, \"3JVBvZnEeW01iQQdtHj5mp7oGGw=\");\n_c2 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas\");\n$RefreshReg$(_c2, \"Whiteboard\");","map":{"version":3,"names":["React","useEffect","useRef","styled","Matter","jsxDEV","_jsxDEV","Canvas","canvas","_c","Whiteboard","thoughts","_s","canvasRef","engineRef","renderRef","bodiesRef","current","console","log","engine","Engine","create","gravity","x","y","render","Render","options","width","window","innerWidth","height","innerHeight","wireframes","background","wallOptions","isStatic","visible","walls","Bodies","rectangle","World","add","world","Events","on","ctx","context","Object","values","forEach","body","thought","find","t","id","pos","position","save","translate","rotate","angle","font","fillStyle","textAlign","textBaseline","fillText","text","restore","run","Runner","handleResize","setPixelRatio","devicePixelRatio","addEventListener","removeEventListener","off","stop","clear","remove","entries","Number","margin","Math","random","strokeStyle","lineWidth","isPinned","friction","frictionAir","restitution","Body","setVelocity","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/arvindas/Projects/thought-dump/src/components/Whiteboard.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\n\nconst Canvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\ninterface Thought {\n  id: number;\n  text: string;\n  color: string;\n  size: 'small' | 'medium' | 'large';\n  isPinned: boolean;\n}\n\ninterface WhiteboardProps {\n  thoughts: Thought[];\n}\n\nconst Whiteboard: React.FC<WhiteboardProps> = ({ thoughts }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const engineRef = useRef<Matter.Engine | null>(null);\n  const renderRef = useRef<Matter.Render | null>(null);\n  const bodiesRef = useRef<{ [key: number]: Matter.Body }>({});\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    console.log('Initializing Matter.js engine');\n\n    // Create Matter.js engine\n    const engine = Matter.Engine.create({\n      gravity: { x: 0, y: 0 } // Disable gravity\n    });\n    engineRef.current = engine;\n\n    // Create renderer with correct type\n    const render = Matter.Render.create({\n      canvas: canvasRef.current,\n      engine: engine,\n      options: {\n        width: window.innerWidth,\n        height: window.innerHeight - 100,\n        wireframes: false,\n        background: 'white',\n      },\n    } as Matter.IRenderDefinition);\n    renderRef.current = render;\n\n    // Add walls to contain thoughts\n    const wallOptions = { isStatic: true, render: { visible: false } };\n    const walls = [\n      Matter.Bodies.rectangle(-50, window.innerHeight / 2, 100, window.innerHeight, wallOptions),\n      Matter.Bodies.rectangle(window.innerWidth + 50, window.innerHeight / 2, 100, window.innerHeight, wallOptions),\n      Matter.Bodies.rectangle(window.innerWidth / 2, -50, window.innerWidth, 100, wallOptions),\n      Matter.Bodies.rectangle(window.innerWidth / 2, window.innerHeight + 50, window.innerWidth, 100, wallOptions),\n    ];\n\n    Matter.World.add(engine.world, walls);\n\n    // Custom render function for text\n    Matter.Events.on(render, 'afterRender', () => {\n      const ctx = render.context;\n      Object.values(bodiesRef.current).forEach((body) => {\n        const thought = thoughts.find(t => t.id === body.id);\n        if (!thought) return;\n\n        const pos = body.position;\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.rotate(body.angle);\n        ctx.font = '16px Arial';\n        ctx.fillStyle = '#000';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(thought.text, 0, 0);\n        ctx.restore();\n      });\n    });\n\n    Matter.Render.run(render);\n    Matter.Runner.run(Matter.Runner.create(), engine);\n\n    // Handle window resize\n    const handleResize = () => {\n      render.canvas.width = window.innerWidth;\n      render.canvas.height = window.innerHeight - 100;\n      Matter.Render.setPixelRatio(render, window.devicePixelRatio);\n    };\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      Matter.Events.off(render, 'afterRender');\n      Matter.Render.stop(render);\n      Matter.Engine.clear(engine);\n      render.canvas.remove();\n    };\n  }, []);\n\n  // Update physics bodies when thoughts change\n  useEffect(() => {\n    if (!engineRef.current || !renderRef.current) return;\n\n    console.log('Updating physics bodies for thoughts:', thoughts);\n    const engine = engineRef.current;\n\n    // Remove bodies that no longer have corresponding thoughts\n    Object.entries(bodiesRef.current).forEach(([id, body]) => {\n      if (!thoughts.find(t => t.id === Number(id))) {\n        Matter.World.remove(engine.world, body);\n        delete bodiesRef.current[Number(id)];\n      }\n    });\n\n    // Update or create bodies for thoughts\n    thoughts.forEach((thought) => {\n      if (!bodiesRef.current[thought.id]) {\n        console.log('Creating new body for thought:', thought);\n        \n        // Calculate random position within visible area\n        const margin = 100;\n        const x = margin + Math.random() * (window.innerWidth - 2 * margin);\n        const y = margin + Math.random() * (window.innerHeight - 200);\n\n        const body = Matter.Bodies.rectangle(x, y, 200, 60, {\n          id: thought.id,\n          render: {\n            fillStyle: '#ffffff',\n            strokeStyle: '#000000',\n            lineWidth: 1\n          },\n          isStatic: thought.isPinned,\n          friction: 0.1,\n          frictionAir: 0.02,\n          restitution: 0.5\n        });\n\n        bodiesRef.current[thought.id] = body;\n        Matter.World.add(engine.world, body);\n\n        // Add some initial velocity\n        Matter.Body.setVelocity(body, {\n          x: (Math.random() - 0.5) * 5,\n          y: (Math.random() - 0.5) * 5\n        });\n      }\n    });\n  }, [thoughts]);\n\n  return <Canvas ref={canvasRef} />;\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}